import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    return savedTheme || 'system';\n  });\n\n  const [isDark, setIsDark] = useState(false);\n\n  useEffect(() => {\n    const updateTheme = () => {\n      let darkMode = false;\n\n      if (theme === 'dark') {\n        darkMode = true;\n      } else if (theme === 'system') {\n        darkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      }\n\n      setIsDark(darkMode);\n      \n      if (darkMode) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    };\n\n    updateTheme();\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      if (theme === 'system') {\n        updateTheme();\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [theme]);\n\n  const handleSetTheme = (newTheme: Theme) => {\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme: handleSetTheme, isDark }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};
